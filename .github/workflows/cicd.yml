name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # AZURE_CONTAINER_REGISTRY: "your-azure-container-registry"
  # RESOURCE_GROUP: "your-resource-group"
  # CLUSTER_NAME: "your-cluster-name"
  # Backend variables
  DEBUG: 'False'
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DOMAIN: ${{ vars.DOMAIN }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }} 
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
  # Frontend variables
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
  NEXT_PUBLIC_APP_API_URL: ${{ vars.NEXT_PUBLIC_APP_API_URL }}
  NEXT_PUBLIC_APP_SOCKET_URL: ${{ vars.NEXT_PUBLIC_APP_SOCKET_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
  NEXT_PUBLIC_APP_DOMAIN: ${{ vars.NEXT_PUBLIC_APP_DOMAIN }}
  # Socket variables
  SOCKET_DEBUG: ${{ false }}
  ORIGIN_URL: ${{ vars.ORIGIN_URL }}

jobs:
  unit-tests:
    environment: testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Backend Tests
      working-directory: ./backend
      run: |
        python manage.py test apps

    - name: Set up Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: |
        npm install
        npm run build

    - name: Run Frontend Tests
      working-directory: ./frontend
      run: |
        echo "Run Frontend Tests"
        npm run test --if-present

    - name: Set up Node.js for Socket
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: socket/package-lock.json
    
    - name: Install Socket Dependencies
      working-directory: ./socket
      run: |
        npm install

    - name: Run Socket Tests
      working-directory: ./socket
      run: |
        echo "Run Socket Tests" 
        npm run test --if-present
 
  build-and-publish-images:
    environment: staging
    needs: unit-tests
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Backend Docker Image
      run:  echo "Build Backend Docker Image"
      # run: |
      #   cd backend
      #   docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ github.sha }} backend/

    - name: Push Backend Image to ACR
      run:  echo "Push Backend Image to ACR"
      # run: |
      #   echo ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} --username ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} --password-stdin
      #   docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ github.sha }}

    - name: Build Frontend Docker Image
      run:  echo "Build Frontend Docker Image"
      # run: |
      #   cd ../frontend
      #   docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ github.sha }} frontend/

    - name: Push Frontend Image to ACR
      run:  echo "Push Frontend Image to ACR"
      # run: |
      #   echo ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} --username ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} --password-stdin
      #   docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ github.sha }}

    - name: Build Socket Docker Image
      run:  echo "Build Socket Docker Image"
      # run: |
      #   cd ../socket
      #   docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/socket:${{ github.sha }} socket/

    - name: Push Socket Image to ACR
      run:  echo "Push Socket Image to ACR"
      # run: |
      #   echo ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} --username ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} --password-stdin
      #   docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/socket:${{ github.sha }}

  deploy-to-qa:
    environment: staging
    needs: [unit-tests, build-and-publish-images]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # - name: Azure login
    #   uses: azure/login@v1.4.6
    #   with:
    #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # - name: Set up kubelogin for non-interactive login
    #   uses: azure/use-kubelogin@v1
    #   with:
    #     kubelogin-version: 'v0.0.25'

    # - name: Get K8s context
    #   uses: azure/aks-set-context@v3
    #   with:
    #     resource-group: ${{ env.RESOURCE_GROUP }}
    #     cluster-name: ${{ env.CLUSTER_NAME }}
    #     admin: 'false'
    #     use-kubelogin: 'true'

    - name: Deploy to QA environment
      run:  echo "Deploy to QA environment"
      # run: |
      #   kubectl apply -f k8s/qa/

    - name: Run Integration Tests in QA
      run: echo "Integration tests to be added here..."

  deploy-to-production:
    needs: deploy-to-qa
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4

    # - name: Azure login
    #   uses: azure/login@v1.4.6
    #   with:
    #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # - name: Set up kubelogin for non-interactive login
    #   uses: azure/use-kubelogin@v1
    #   with:
    #     kubelogin-version: 'v0.0.25'

    # - name: Get K8s context
    #   uses: azure/aks-set-context@v3
    #   with:
    #     resource-group: ${{ env.RESOURCE_GROUP }}
    #     cluster-name: ${{ env.CLUSTER_NAME }}
    #     admin: 'false'
    #     use-kubelogin: 'true'

    - name: Deploy to Production environment
      run:  echo "Deploy to Production environment"
      # run: |
      #   kubectl apply -f k8s/production/

