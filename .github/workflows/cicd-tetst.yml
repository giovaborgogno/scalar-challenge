name: CI/CD Pipeline - Test

on:
  push:
    # branches:
    #   - main
    paths:
      - 'backend/**'
      - 'socket/**'
      - 'frontend/**'

env:
  # Backend variables
  DEBUG: 'False'
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DOMAIN: ${{ vars.DOMAIN }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }} 
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
  # Frontend variables
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
  NEXT_PUBLIC_APP_API_URL: ${{ vars.NEXT_PUBLIC_APP_API_URL }}
  NEXT_PUBLIC_APP_SOCKET_URL: ${{ vars.NEXT_PUBLIC_APP_SOCKET_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
  # Socket variables
  SOCKET_DEBUG: ${{ false }}
  ORIGIN_URL: ${{ vars.ORIGIN_URL }}
  MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}
  MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'
          socket:
            - 'socket/**'

  unit-tests:
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(needs.changes.outputs.services) }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      if: ${{ matrix.service == 'backend' }}
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    - name: Install Dependencies and Run Python Tests
      if: ${{ matrix.service == 'backend' }}
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python manage.py test apps

    - name: Set up Node.js
      if: ${{ matrix.service != 'backend' }}
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json
    - name: Install Dependencies and Run Node Tests
      if: ${{ matrix.service != 'backend' }}
      working-directory: ./${{ matrix.service }}
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

  build-and-publish-images:
    needs: [changes, unit-tests]
    strategy:
      matrix:
        service: ${{ fromJSON(needs.changes.outputs.services) }}
    uses: ./.github/workflows/build.yml   
    with:
      service: ${{ matrix.service }}
    secrets: inherit

  deploy-staging:
    needs: [changes, build-and-publish-images]
    strategy:
      matrix:
        service: ${{ fromJSON(needs.changes.outputs.services) }}
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy.yml
    with:
      service: ${{ matrix.service }}
      targetPort: ${{ matrix.service == 'backend' && '8000' || matrix.service == 'frontend' && '3000' || matrix.service == 'socket' && '4000' }} 
      environment: staging
      environmentVariables: |
        'SECRET_KEY="$SECRET_KEY"' "DATABASE_URL=$DATABASE_URL" "DOMAIN=$DOMAIN" "EMAIL_HOST=$EMAIL_HOST" "EMAIL_HOST_USER=$EMAIL_HOST_USER" "EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD" "EMAIL_PORT=$EMAIL_PORT" "EMAIL_USE_SSL=$EMAIL_USE_SSL" \ 
        "DEBUG=$SOCKET_DEBUG" "ORIGIN_URL=$ORIGIN_URL" 'MONGO_CONNECTION_STRING="$MONGO_CONNECTION_STRING"' "MONGO_DB_NAME=$MONGO_DB_NAME" \
        "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL" "NEXT_PUBLIC_APP_API_URL=$NEXT_PUBLIC_APP_API_URL" "NEXT_PUBLIC_APP_SOCKET_URL=$NEXT_PUBLIC_APP_SOCKET_URL" "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" "NEXTAUTH_URL=$NEXTAUTH_URL"
    secrets: inherit
 
  integration-tests:
    needs: deploy-staging
    environment: staging
    runs-on: ubuntu-latest
    steps:
    - name: Run Integration Tests in QA
      run: |
        echo "Integration tests to be added here..."

  deploy-production:
    needs: [changes, integration-tests]
    strategy:
      matrix:
        service: ${{ fromJSON(needs.changes.outputs.services) }}
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy.yml
    with:
      service: ${{ matrix.service }}
      targetPort: ${{ matrix.service == 'backend' && '8000' || matrix.service == 'frontend' && '3000' || matrix.service == 'socket' && '4000' }} 
      environment: production
      environmentVariables: |
        'SECRET_KEY="$SECRET_KEY"' "DATABASE_URL=$DATABASE_URL" "DOMAIN=$DOMAIN" "EMAIL_HOST=$EMAIL_HOST" "EMAIL_HOST_USER=$EMAIL_HOST_USER" "EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD" "EMAIL_PORT=$EMAIL_PORT" "EMAIL_USE_SSL=$EMAIL_USE_SSL" \ 
        "DEBUG=$SOCKET_DEBUG" "ORIGIN_URL=$ORIGIN_URL" 'MONGO_CONNECTION_STRING="$MONGO_CONNECTION_STRING"' "MONGO_DB_NAME=$MONGO_DB_NAME" \
        "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL" "NEXT_PUBLIC_APP_API_URL=$NEXT_PUBLIC_APP_API_URL" "NEXT_PUBLIC_APP_SOCKET_URL=$NEXT_PUBLIC_APP_SOCKET_URL" "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" "NEXTAUTH_URL=$NEXTAUTH_URL"
    secrets: inherit