name: Deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      targetPort:
        required: true
        type: string
      environmentVariables:
        required: true
        type: string
      environment:
        required: true
        type: string

env:
  # Backend variables
  DEBUG: 'False'
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DOMAIN: ${{ vars.DOMAIN }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }} 
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
  # Frontend variables
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
  NEXT_PUBLIC_APP_API_URL: ${{ vars.NEXT_PUBLIC_APP_API_URL }}
  NEXT_PUBLIC_APP_SOCKET_URL: ${{ vars.NEXT_PUBLIC_APP_SOCKET_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
  # Socket variables
  SOCKET_DEBUG: ${{ false }}
  ORIGIN_URL: ${{ vars.ORIGIN_URL }}
  MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}
  MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy ${{ inputs.service }} Container App
      uses: azure/container-apps-deploy-action@v2
      with:
        containerAppName: ${{ inputs.service }}
        imageToDeploy: ${{ secrets.ACR_NAME }}.azurecr.io/${{ inputs.service }}:${{ github.sha }} 
        acrName: ${{ secrets.ACR_NAME}}
        acrUsername: ${{ secrets.ACR_USERNAME }}
        acrPassword: ${{ secrets.ACR_PASSWORD }}
        resourceGroup: ${{ secrets.RESOURCE_GROUP }}
        containerAppEnvironment: scalarchallenge-${{ inputs.environment }}
        location: ${{ secrets.LOCATION }}
        targetPort: ${{ inputs.targetPort }}
        environmentVariables: ${{ inputs.environmentVariables }}
