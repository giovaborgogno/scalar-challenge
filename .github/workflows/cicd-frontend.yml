name: CI/CD Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:

env:
  # Azure variables
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  ACR_NAME: ${{ vars.ACR_NAME }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  LOCATION: ${{ vars.LOCATION }}
  # Frontend variables
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
  NEXT_PUBLIC_APP_API_URL: ${{ vars.NEXT_PUBLIC_APP_API_URL }}
  NEXT_PUBLIC_APP_SOCKET_URL: ${{ vars.NEXT_PUBLIC_APP_SOCKET_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install Dependencies and Run Node Tests
      working-directory: ./frontend
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present 

  build-and-publish-images:
    needs: unit-tests
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Docker Login
      uses: azure/docker-login@v2
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}
    - name: Build and Push to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ env.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }}
        context: frontend

  deploy:
    needs: build-and-publish-images
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    strategy:
      max-parallel: 1 # We ensure initial deployment to staging and perform integration testing before beginning deployment to production.
      matrix:
        environment: [staging, production]
    environment: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Socket Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: frontend
        imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }} 
        acrName: ${{ env.ACR_NAME}}
        acrUsername: ${{ env.ACR_USERNAME }}
        acrPassword: ${{ env.ACR_PASSWORD }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        containerAppEnvironment: scalarchallenge-${{ matrix.environment }}
        location: ${{ env.LOCATION }}
        targetPort: 3000
        environmentVariables: |
          "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL" "NEXT_PUBLIC_APP_API_URL=$NEXT_PUBLIC_APP_API_URL" "NEXT_PUBLIC_APP_SOCKET_URL=$NEXT_PUBLIC_APP_SOCKET_URL" "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" "NEXTAUTH_URL=$NEXTAUTH_URL" 

    - name: Run Integration Tests in QA
      if: ${{ matrix.environment == 'staging' }}
      run: |
        echo "Integration tests to be added here..."
